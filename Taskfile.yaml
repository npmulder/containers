---
version: '3'

vars:
  SCHEMA_VERSION: "2.0.0"
  TESTS_SCHEMA_VERSION: "0.0.1"
  TEST_TOOL: '{{if eq .SCHEMA_VERSION "1.0.0"}}cst{{else}}goss{{end}}'
  CHANNEL: '{{.CHANNEL | default "stable"}}'
  PLATFORM: '{{.PLATFORM | default "linux/amd64"}}'
  REGISTRY: '{{.REGISTRY | default "ghcr.io"}}'
  OWNER: '{{.OWNER | default "neilmulder"}}'
  BIN_DIR: ".task/bin"
  WORK_DIR: ".task/work"

tasks:
  local-build-*:
    desc: "Build image locally"
    cmds:
      - task: sync-include
      - task: sync-app
        vars:
          APP: '{{index .MATCH 0}}'
      - |
        echo "Building image for {{.APP}}..."
        docker buildx build \
          --platform {{.PLATFORM}} \
          --build-arg CHANNEL={{.CHANNEL}} \
          --build-arg VERSION={{.VERSION}} \
          --tag {{.REGISTRY}}/{{.OWNER}}/{{.APP}}:{{.VERSION}} \
          --tag {{.REGISTRY}}/{{.OWNER}}/{{.APP}}:latest \
          --file {{.WORK_DIR}}/apps/{{.APP}}/Dockerfile \
          --load \
          {{.WORK_DIR}}/apps/{{.APP}}/
      - |
        echo "Running tests..."
        export GOSS_SLEEP=10s
        export GOSS_FILES_STRATEGY=cp
        export CONTAINER_RUNTIME=docker
        export CONTAINER_LOG_OUTPUT=goss_container_log_output
        export GOSS_FILE={{.WORK_DIR}}/apps/{{.APP}}/tests.yaml
        export GOSS_USE_ALPHA=1
        
        # Run container tests using dgoss pattern
        CONTAINER_ID=$(docker run -d -p 11434:11434 {{.REGISTRY}}/{{.OWNER}}/{{.APP}}:{{.VERSION}} serve)
        echo "Started container: $CONTAINER_ID"
        
        # Wait for the container to be ready
        sleep 15
        
        # Run tests against the running container
        {{.TEST_TOOL}} validate --format documentation
        
        # Clean up
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID
      - task: cleanup-app
        vars:
          APP: '{{index .MATCH 0}}'
    vars:
      APP: '{{index .MATCH 0}}'
      VERSION: '{{.VERSION | default "latest"}}'
    preconditions:
      - sh: command -v docker
        msg: "Docker is not installed"
      - sh: command -v {{.TEST_TOOL}}
        msg: "{{.TEST_TOOL}} is not installed"

  remote-build-*:
    desc: "Build image via GitHub Actions"
    cmds:
      - |
        echo "Triggering remote build for {{.APP}}..."
        gh workflow run app-builder.yaml --ref main -f app={{.APP}} -f release={{.RELEASE}}
    vars:
      APP: '{{index .MATCH 0}}'
      RELEASE: '{{.RELEASE | default "false"}}'
    preconditions:
      - sh: command -v gh
        msg: "GitHub CLI is not installed"

  sync-include:
    desc: "Sync include directory"
    internal: true
    cmds:
      - |
        echo "Syncing include directory..."
        mkdir -p {{.WORK_DIR}}/include
        if [ -d ./include ]; then
          # Copy all files including hidden ones
          cp -r ./include/. {{.WORK_DIR}}/include/
          echo "Include directory synced"
        else
          echo "Include directory doesn't exist, skipping..."
        fi

  sync-app:
    desc: "Sync app directory"
    internal: true
    cmds:
      - |
        echo "Syncing app directory for {{.APP}}..."
        mkdir -p {{.WORK_DIR}}/apps/{{.APP}}
        cp -r ./apps/{{.APP}}/* {{.WORK_DIR}}/apps/{{.APP}}/

  cleanup-app:
    desc: "Clean up app work directory"
    internal: true
    cmds:
      - |
        echo "Cleaning up work directory for {{.APP}}..."
        rm -rf {{.WORK_DIR}}/apps/{{.APP}}

  cleanup:
    desc: "Clean up all work directories"
    cmds:
      - |
        echo "Cleaning up work directory..."
        rm -rf {{.WORK_DIR}}

  generate-label-config:
    desc: "Generate GitHub label configuration"
    cmds:
      - |
        echo "Generating label configuration..."
        mkdir -p .github
        # Generate labels for all apps
        {
          echo "# This file is generated by task generate-label-config"
          echo "# Do not edit manually"
          echo ""
          for app in apps/*/; do
            if [ -d "$app" ]; then
              app_name=$(basename "$app")
              echo "- name: \"app/$app_name\""
              echo "  color: \"1f77b4\""
              echo "  description: \"$app_name application\""
            fi
          done
        } > .github/labels.yml
        
        # Generate labeler configuration
        {
          echo "# This file is generated by task generate-label-config"
          echo "# Do not edit manually"
          echo ""
          for app in apps/*/; do
            if [ -d "$app" ]; then
              app_name=$(basename "$app")
              echo "\"app/$app_name\":"
              echo "  - apps/$app_name/**"
            fi
          done
        } > .github/labeler.yml

  list-apps:
    desc: "List all available applications"
    cmds:
      - |
        echo "Available applications:"
        for app in apps/*/; do
          if [ -d "$app" ]; then
            app_name=$(basename "$app")
            echo "  - $app_name"
          fi
        done

  build-all:
    desc: "Build all applications locally"
    cmds:
      - |
        for app in apps/*/; do
          if [ -d "$app" ]; then
            app_name=$(basename "$app")
            echo "Building $app_name..."
            task local-build-$app_name
          fi
        done

  test-*:
    desc: "Run tests for a specific app without building"
    cmds:
      - |
        echo "Running tests for {{.APP}}..."
        export GOSS_SLEEP=10s
        export GOSS_FILES_STRATEGY=cp
        export CONTAINER_RUNTIME=docker
        export CONTAINER_LOG_OUTPUT=goss_container_log_output
        export GOSS_FILE=./apps/{{.APP}}/tests.yaml
        export GOSS_USE_ALPHA=1
        {{.TEST_TOOL}} validate --format documentation
    vars:
      APP: '{{index .MATCH 0}}'
    preconditions:
      - sh: command -v {{.TEST_TOOL}}
        msg: "{{.TEST_TOOL}} is not installed"

set:
  - pipefail